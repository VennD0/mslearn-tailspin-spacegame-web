# Azure Deployment Plan for Tailspin.SpaceGame.Web Project

## **Goal**
Deploy the Tailspin.SpaceGame.Web project to Azure Web App Service using Azure DevOps multi-stage YAML pipeline with deployment slots for UAT and Production environments.

## **Project Information**
AppName: Tailspin.SpaceGame.Web
- **Technology Stack**: ASP.NET Core 8.0 MVC web application
- **Application Type**: Space Game web application with leaderboard functionality
- **Build System**: .NET 8.0 with standard web project structure
- **Dependencies**: Local document DB repository (currently mock data)
- **Hosting Recommendation**: Azure App Service with deployment slots for staging/production workflow

## **Azure Resources Architecture**
> **Install the mermaid extension in IDE to view the architecture.**

```mermaid
graph TB
    ADO[Azure DevOps Pipeline] --> ACR[Azure Container Registry]
    ADO --> RG[Resource Group]
    
    subgraph "Production Environment"
        ASP_PROD[App Service Plan - Production]
        WA_PROD[Web App - Production]
        WA_PROD_STAGING[Web App - Staging Slot]
        ASP_PROD --> WA_PROD
        ASP_PROD --> WA_PROD_STAGING
    end
    
    subgraph "UAT Environment"
        ASP_UAT[App Service Plan - UAT]
        WA_UAT[Web App - UAT]
        ASP_UAT --> WA_UAT
    end
    
    subgraph "Monitoring & Security"
        AI[Application Insights]
        LAW[Log Analytics Workspace]
        KV[Key Vault]
    end
    
    ADO --> ASP_UAT
    ADO --> ASP_PROD
    WA_PROD --> AI
    WA_UAT --> AI
    WA_PROD_STAGING --> AI
    AI --> LAW
    
    WA_PROD --> KV
    WA_UAT --> KV
    WA_PROD_STAGING --> KV
```

Data flow:
- Azure DevOps pipeline builds and deploys the application to UAT environment first
- After UAT approval, application is deployed to Production staging slot
- Manual approval triggers slot swap from staging to production
- All environments connect to shared Application Insights for monitoring
- Key Vault stores application secrets and connection strings

## **Recommended Azure Resources**

### Application Hosting
- **Application**: Tailspin.SpaceGame.Web
  - **Hosting Service Type**: Azure App Service (Web App)
  - **SKU**: Standard S1 (1 Core, 1.75 GB RAM) - suitable for development/testing with slot support
  - **Configuration**:
    - Language: .NET 8.0
    - Runtime Stack: ASP.NET Core 8.0
    - Environment Variables: 
      - `ASPNETCORE_ENVIRONMENT`
      - `ApplicationInsights__ConnectionString`
    - Deployment Slots: staging (for production app)

### Supporting Services
- **Application Insights**: For application performance monitoring and telemetry
- **Log Analytics Workspace**: Centralized logging for all App Services
- **Key Vault**: Store application secrets and connection strings securely
- **App Service Plans**:
  - UAT: Standard S1
  - Production: Standard S1 (can be scaled up for production workloads)

### Security Configurations
- **Managed Identity**: System-assigned managed identity for secure access to Key Vault
- **RBAC**: App Service managed identity with Key Vault Secrets User role
- **SSL/TLS**: HTTPS only enforcement
- **Authentication**: Azure AD integration (optional for future enhancement)

## **Execution Steps**
> **Below are the steps for implementation:**

### Phase 1: Infrastructure Setup
1. Create Infrastructure as Code (Bicep templates)
2. Set up Azure DevOps service connections
3. Create multi-stage YAML pipeline
4. Deploy infrastructure using pipeline

### Phase 2: Application Deployment Pipeline
1. Build stage: Compile and test .NET application
2. UAT Deployment: Deploy to UAT environment
3. UAT Approval: Manual approval gate
4. Production Staging: Deploy to production staging slot
5. Production Approval: Manual approval for slot swap
6. Slot Swap: Swap staging to production

### Phase 3: Monitoring & Validation
1. Configure Application Insights monitoring
2. Set up alerts and dashboards
3. Validate deployment health checks
4. Configure automated rollback if needed