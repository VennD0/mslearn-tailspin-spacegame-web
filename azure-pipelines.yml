# UseCase3: Docker + AKS DevOps Pipeline
# Build ‚Üí Containerize ‚Üí Deploy to Azure Kubernetes Service

trigger:
- usecase3-docker-aks

variables:
  buildConfiguration: 'Release'
  dockerRegistryServiceConnection: 'tailspin-acr-connection'
  imageRepository: 'tailspin/spacegame-web'
  containerRegistry: '#{ACR_NAME}#.azurecr.io'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildId)'
  k8sNamespace: 'tailspin'
  aksServiceConnection: 'tailspin-aks-connection'

stages:
- stage: 'Build'
  displayName: 'Build and Push Container Image'
  jobs:
  - job: 'Build'
    displayName: 'Build Docker Image'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK 8.x'
      inputs:
        packageType: 'sdk'
        version: '8.x'

    - task: DotNetCoreCLI@2
      displayName: 'Restore dependencies'
      inputs:
        command: 'restore'
        projects: 'Tailspin.SpaceGame.Web/Tailspin.SpaceGame.Web.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build application'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: 'Tailspin.SpaceGame.Web/Tailspin.SpaceGame.Web.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests'
      inputs:
        command: 'test'
        arguments: '--no-build --configuration $(buildConfiguration) --collect:"XPlat Code Coverage"'
        projects: '**/*Tests.csproj'
        publishTestResults: true
      continueOnError: true

    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: '$(dockerfilePath)'
        tags: |
          $(tag)
          latest

    - task: Docker@2
      displayName: 'Push Docker image to ACR'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'push'
        tags: |
          $(tag)
          latest

- stage: 'Deploy'
  displayName: 'Deploy to AKS'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/usecase3-docker-aks'))
  jobs:
  - deployment: Deploy
    displayName: 'Deploy to AKS cluster'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'AKS-Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: KubernetesManifest@0
            displayName: 'Create/Update namespace'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: '$(aksServiceConnection)'
              namespace: '$(k8sNamespace)'
              manifests: 'k8s/namespace.yaml'

          - task: KubernetesManifest@0
            displayName: 'Deploy application to AKS'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: '$(aksServiceConnection)'
              namespace: '$(k8sNamespace)'
              manifests: |
                k8s/deployment.yaml
                k8s/service.yaml
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'

          - task: Kubernetes@1
            displayName: 'Get service details'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: '$(aksServiceConnection)'
              namespace: '$(k8sNamespace)'
              command: 'get'
              arguments: 'service tailspin-spacegame-web-service -o wide'
              outputFormat: 'none'

          - task: PowerShell@2
            displayName: 'Display deployment information'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "üéâ Deployment completed successfully!"
                Write-Host ""
                Write-Host "üìã Deployment Details:"
                Write-Host "  ‚Ä¢ Application: Tailspin SpaceGame Web"
                Write-Host "  ‚Ä¢ Container Image: $(containerRegistry)/$(imageRepository):$(tag)"
                Write-Host "  ‚Ä¢ Kubernetes Namespace: $(k8sNamespace)"
                Write-Host "  ‚Ä¢ Build ID: $(Build.BuildId)"
                Write-Host ""
                Write-Host "üîç To check deployment status:"
                Write-Host "  kubectl get pods -n $(k8sNamespace)"
                Write-Host "  kubectl get services -n $(k8sNamespace)"
                Write-Host ""
                Write-Host "üåê To get external IP (may take a few minutes):"
                Write-Host "  kubectl get service tailspin-spacegame-web-service -n $(k8sNamespace)"